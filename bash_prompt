#!/usr/bin/env bash
# shellcheck disable=SC2034

set_prompt() {
    local session_type="$1"

    # Reset
    local Reset='\[\e[0m\]'

    # Bold
    local Bold='\[\e[0;1m\]'

    # Underline
    local Underline='\[\e[0;4m\]'

    # Bold underline
    local BoldUnderline='\[\e[0;1;4m\]'

    # Regular foreground
    local Black='\[\e[30m\]'
    local Red='\[\e[31m\]'
    local Green='\[\e[32m\]'
    local Yellow='\[\e[33m\]'
    local Blue='\[\e[34m\]'
    local Purple='\[\e[35m\]'
    local Cyan='\[\e[36m\]'
    local White='\[\e[37m\]'

    # High Intensity foreground
    local IBlack='\[\e[90m\]'
    local IRed='\[\e[91m\]'
    local IGreen='\[\e[92m\]'
    local IYellow='\[\e[93m\]'
    local IBlue='\[\e[94m\]'
    local IPurple='\[\e[95m\]'
    local ICyan='\[\e[96m\]'
    local IWhite='\[\e[97m\]'

    # Regular background
    local OnBlack='\[\e[40m\]'
    local OnRed='\[\e[41m\]'
    local OnGreen='\[\e[42m\]'
    local OnYellow='\[\e[43m\]'
    local OnBlue='\[\e[44m\]'
    local OnPurple='\[\e[45m\]'
    local OnCyan='\[\e[46m\]'
    local OnWhite='\[\e[47m\]'

    # High Intensity background
    local OnIBlack='\[\e[100m\]'
    local OnIRed='\[\e[101m\]'
    local OnIGreen='\[\e[102m\]'
    local OnIYellow='\[\e[103m\]'
    local OnIBlue='\[\e[104m\]'
    local OnIPurple='\[\e[105m\]'
    local OnICyan='\[\e[106m\]'
    local OnIWhite='\[\e[107m\]'

    # get shell nest level
    local shell_lvl="$(format_nest_level "${SHLVL}") "

    # get conda level and environment
    if [[ -n "${CONDA_DEFAULT_ENV}" ]]; then
        # get conda nest level
        local conda_lvl="$(format_nest_level "${CONDA_SHLVL}") "
        local conda_env="(${IBlue}${CONDA_DEFAULT_ENV}${Reset})${conda_lvl}"
    fi

    # check if current dir belongs to overlayed ROS package
    if [[ -n "${ROS_DISTRO}" ]] && command -v "rospack" &> /dev/null; then
        for package_path in $(rospack list | awk '{print $2}'); do
            if [[ "${PWD}" == "${package_path}"* ]]; then
                local ros_pkg="${Green}✔︎${Reset}"
                break
            fi
        done
    fi

    # check this is an SSH session
    if [[ "${session_type}" == "remote_ssh" ]]; then
        local work_dir="${IBlack}\h::\W${Reset}"
    else
        local work_dir="${IBlack}\W${Reset}"
    fi

    # return the prompt string
    echo "${shell_lvl}${conda_env}${work_dir}${ros_pkg}"
}

format_nest_level() {
    # check shell nest level
    case "$1" in
        0 | 1) ;;
        2)
            echo "❭"
            ;;
        3)
            echo "❭❭"
            ;;
        *)
            echo "$1❭"
            ;;
    esac
}

# notify the terminal
if [[ "${session_type}" == "remote_ssh" ]]; then
    export PROMPT_COMMAND+='echo -ne "\033]0;${HOSTNAME%.*}::$(dirs +0)\007"; '
else
    export PROMPT_COMMAND+='echo -ne "\033]0;$(dirs +0)\007"; '
fi

# make git prompt command available
if [[ -f "${HOMEBREW_PREFIX}/etc/bash_completion.d/git-prompt.sh" ]]; then
    source "${HOMEBREW_PREFIX}/etc/bash_completion.d/git-prompt.sh"
fi

# git prompt options
export GIT_PS1_SHOWCOLORHINTS=true
export GIT_PS1_SHOWDIRTYSTATE=true
export GIT_PS1_SHOWSTASHSTATE=true
export GIT_PS1_DESCRIBE_STYLE="contains"
export GIT_PS1_SHOWUNTRACKEDFILES=true
export GIT_PS1_SHOWUPSTREAM="auto"

export -f set_prompt __git_ps1
export PROMPT_COMMAND+='__git_ps1 "$(set_prompt "'"${session_type}"'")" " "; '
#export PS1="$(set_prompt "${session_type}")"  # is set by __git_ps1
