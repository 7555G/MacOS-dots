#!/usr/bin/env bash
# shellcheck disable=SC1090,SC1091,SC2155,SC2206,SC2154

main() {
    set_vars() {
        arr=("$@")
        for i in "${arr[@]}"; do
            var_tuple=($i)
            export "${var_tuple[0]}=${var_tuple[1]}"
        done
    }

    unset_vars() {
        arr=("$@")
        for i in "${arr[@]}"; do
            var_tuple=($i)
            eval "unset ${var_tuple[0]}"
        done
    }

    # set color shortcuts
    TEXT_FORMATTING_VARS=(
        # Reset
        'Reset \[\e[0m\]'

        # Bold
        'Bold \[\e[0;1m\]'

        # Underline
        'Underline \[\e[0;4m\]'

        # Bold underline
        'BoldUnderline \[\e[0;1;4m\]'

        # Regular foreground
        'Black \[\e[30m\]'
        'Red \[\e[31m\]'
        'Green \[\e[32m\]'
        'Yellow \[\e[33m\]'
        'Blue \[\e[34m\]'
        'Magenta \[\e[35m\]'
        'Cyan \[\e[36m\]'
        'White \[\e[37m\]'

        # High Intensity foreground
        'IBlack \[\e[90m\]'
        'IRed \[\e[91m\]'
        'IGreen \[\e[92m\]'
        'IYellow \[\e[93m\]'
        'IBlue \[\e[94m\]'
        'IMagenta \[\e[95m\]'
        'ICyan \[\e[96m\]'
        'IWhite \[\e[97m\]'

        # Regular background
        'OnBlack \[\e[40m\]'
        'OnRed \[\e[41m\]'
        'OnGreen \[\e[42m\]'
        'OnYellow \[\e[43m\]'
        'OnBlue \[\e[44m\]'
        'OnMagenta \[\e[45m\]'
        'OnCyan \[\e[46m\]'
        'OnWhite \[\e[47m\]'

        # High Intensity background
        'OnIBlack \[\e[100m\]'
        'OnIRed \[\e[101m\]'
        'OnIGreen \[\e[102m\]'
        'OnIYellow \[\e[103m\]'
        'OnIBlue \[\e[104m\]'
        'OnIMagenta \[\e[105m\]'
        'OnICyan \[\e[106m\]'
        'OnIWhite \[\e[107m\]'
    )

    set_prompt() {
        set_vars "${TEXT_FORMATTING_VARS[@]}"

        session_type="$1"

        # get the prompt user
        local user="${IBlue}\${USER}${Reset}"

        # get the SSH session status
        if [[ "${session_type}" == "remote_ssh" ]]; then
            user="${user} ${IBlack}(ssh)${Reset}"
        fi

        # get the singularity status
        local singularity_status="$(get_singularity_status)"

        # get the hostname
        local hostname=" on ${Cyan}\${HOSTNAME%.local}${Reset}"

        # get conda level and environment
        if [[ -n "${CONDA_DEFAULT_ENV}" ]]; then
            # get conda nest level
            # TODO
            local conda_lvl="$(format_nest_level "${CONDA_SHLVL}")"
            if [[ -n "${CONDA_STACKED_2}" ]]; then
                local is_stacked="${IGreen}"
            fi
            local conda_env=" using ${Green}\${CONDA_DEFAULT_ENV}${Reset}${is_stacked}${conda_lvl}${Reset}"
        fi

        # get virtualenv level and environment
        if [[ -n "${VIRTUAL_ENV}" ]]; then
            local virtualenv_env=" (${IGreen}$(basename "${VIRTUAL_ENV}")${Reset})"
        fi

        # get the working directory
        local work_dir=" in ${Bold}${Blue}\w${Reset}"

        # get prompt sign and nest level
        local prompt_sign="${Bold}${IBlack}\$${Reset}"
        local shell_lvl="${IBlack}$(format_nest_level "${SHLVL}")${Reset}"

        # check if current dir belongs to overlayed ROS package
        if command -v "catkin" &> /dev/null \
            && command -v "rospack" &> /dev/null; then
            local catkin_sourced

            local current_workspace="$(catkin locate 2> /dev/null)"
            if [[ -z "${current_workspace}" ]]; then
                catkin_sourced=""
            elif rospack list | grep --max-count 1 "${current_workspace}" &> /dev/null; then
                catkin_sourced="${Green}✔︎${Reset}"
            fi
        fi

        # return the prompt string
        echo -e "  ${user}${singularity_status}${hostname}${conda_env}${virtualenv_env}${work_dir}${catkin_sourced}\n${prompt_sign}${shell_lvl}"

        # unset color shortcuts
        unset_vars "${color_vars[@]}"
    }

    # construct an indicator based on the nesting level
    format_nest_level() { # TODO: doesn't work with root
        # check shell nest level
        case $1 in
            0* | 1*) ;;
            2)
                echo "❭"
                ;;
            *)
                echo "\$(($1 - 1))❭"
                ;;
        esac
    }

    # callback to print the last command exit status
    print_last_status() {
        local last_status=$?
        local IBlack="\e[90m"  # must be without \[ \]
        local Reset="\e[0m"  # must be without \[ \]
        echo -e "${IBlack}Exit ${last_status}${Reset}"
    }

    get_singularity_status() {
        if [[ -n "${SINGULARITY_NAME}" ]]; then
            echo " through ${ICyan}singularity${Reset}"
        fi
    }

    # make git prompt command available
    local git_prompt_path="/etc/bash_completion.d/git-prompt"
    if [[ -f "${HOMEBREW_PREFIX}/${git_prompt_path}.sh" ]]; then
        source "${HOMEBREW_PREFIX}/${git_prompt_path}.sh"
    elif [[ -f "${git_prompt_path}" ]]; then
        source "${git_prompt_path}"
    fi

    # git prompt options
    export GIT_PS1_SHOWCOLORHINTS=true
    export GIT_PS1_SHOWDIRTYSTATE=true
    export GIT_PS1_SHOWSTASHSTATE=true
    export GIT_PS1_DESCRIBE_STYLE="contains"
    export GIT_PS1_SHOWUNTRACKEDFILES=true
    export GIT_PS1_SHOWUPSTREAM="auto"

    export -f set_prompt

    if ! [[ "${PROMPT_COMMAND}" == *"set_prompt"* ]]; then
        export PROMPT_COMMAND="${PROMPT_COMMAND%; }"'; __git_ps1 "$(set_prompt "'"${session_type}"'")" " "'
        export PROMPT_COMMAND="${PROMPT_COMMAND%; }; trap print_last_status ERR"
    fi
    # export PS1="$(set_prompt "${session_type}")"  # is set by __git_ps1
    export PS2='\[\e[30m\]┃\[\e[0m\] '
}

main "$@"
unset main
