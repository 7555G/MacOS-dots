#!/usr/bin/env bash

# usage
USAGE="Usage:
    `basename $0` [file] [command as string]"
[[ -z "$2" ]]      && echo -e "${USAGE}" && exit 1
[[ -n "$3" ]]      && echo -e "${USAGE}" && exit 1
[[ "$1" == "-h" ]] && echo -e "${USAGE}" && exit 0
[[ "$2" == "-h" ]] && echo -e "${USAGE}" && exit 0

# store file info
FILE_PATH="$(grealpath $1)"
DIR="$(dirname "${FILE_PATH}")"
COMMAND="$2"

# function to compile project and execute the binary
function build_and_execute() {
    # kill internal processes on exit
    trap 'jobs -p | xargs kill' EXIT

    # attempt to build project
    clear # clear screen
    # execute the built binary
    echo -e "--- Building & executing ---"
    eval ${COMMAND} &&
        echo -e "----------------------------\n" &&
        echo "Watching \"${FILE_PATH}\"..."
}
export -f build_and_execute

function watch_file() {
    # watch file for changes and forcefully build on detect
    fswatch "${FILE_PATH}" | while read > /dev/null; do
        kill ${task_pid} &> /dev/null
        wait ${task_pid} &> /dev/null
        echo "Rebuilding..."

        # wait $delay seconds for file writes to finish
        delay=1
        files_changed=true
        while [[ ${files_changed} = true ]]; do
            files_changed=false
            [[ -n \
                "$(gtimeout ${delay} fswatch "${FILE_PATH}" -1 -l 0.1)"
            ]] &&
                files_changed=true
        done

        # build and execute the file
        build_and_execute &
            task_pid=$!
    done
}
export -f watch_file

function main() {
    # exit script on ctrl-c
    trap 'echo ": Interrupted" && exit 1' INT

    # build & execute once first
    build_and_execute &
        task_pid=$!

    watch_file
}

main
