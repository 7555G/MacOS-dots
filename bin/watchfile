#!/usr/bin/env bash

# usage
USAGE="Usage:\n    $(basename "$0") [-c] FILE user_command"

# parse arguments
args=()
for arg in "$@"; do
    case "${arg}" in
      "-h"|"--help")
        echo -e "${USAGE}"
        exit 0
        ;;
      "-c"|"--clear")
        has_clear="true"
        shift 1
        ;;
      *)
        args+=("${arg}")
    esac
done

if [[ "${#args[@]}" -ne 2 ]]; then
    echo -e "${USAGE}"
    exit 1
fi

watched_file="$(realpath "${args[0]}")"
user_command="${args[1]}"

# functions to print timestamped formatted message
message () {
    echo -e "[$(date "+%T.%3N")] $*"
}

message_bold() {
    # styling
    BW_TEXT='\033[1;97m'
    TEXT='\033[0m'

    echo -en "${BW_TEXT}"
    message "$*"
    echo -en "${TEXT}"
}

# function to execute command
function execute_cmd() {
    # kill internal processes on exit
    trap 'jobs -p | xargs kill &> /dev/null' EXIT INT

    # execute the command
    if [[ "${has_clear}" == "true" ]]; then
        clear
    fi

    message_bold "Executing ===================="

    if eval "${user_command}"; then
        message_bold "Finished ====================="
    else
        message_bold "Failed ======================="
    fi

    message "Watching ${watched_file}..."
}

function main() {
    local exec_pid
    local changed=false
    local t=0.4
    local l=0.1

    # exit script on ctrl-c
    trap 'echo & message "Interrupted" && exit 1' INT

    # execute command once first
    execute_cmd & exec_pid=$!

    # watch file for changes, terminate and re-execute
    while true; do
        # watch for changes...
        changed="$(fswatch "${watched_file}" -1 --latency ${l})"
        message "File changed"

        # kill current execution
        kill ${exec_pid} &> /dev/null
        wait ${exec_pid} &> /dev/null

        # keep watching for ${timeout} seconds for further changes
        while [[ -n ${changed} ]]; do
            message "Waiting for further changes..."
            changed="$( \
                timeout --foreground ${t} \
                fswatch "${watched_file}" --event "Updated" -1 --latency ${l})"
        done

        # execute command
        execute_cmd & exec_pid=$!
    done
}

main
